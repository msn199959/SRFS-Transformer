import torch
import numpy
import matplotlib.pyplot as plt
encoder_5 = torch.tensor([-9.7775e-04,  1.5171e-03,  1.9995e-03,  1.0632e-03, -3.6293e-03,
        -2.5703e-04, -7.1197e-04,  1.3270e-03, -2.1093e-03,  2.2062e-03,
         1.5572e-03,  1.8101e-03, -4.3349e-03,  1.9886e-04, -4.4249e-04,
        -6.2819e-04, -2.9869e-03,  4.0732e-04,  1.1425e-03,  1.3335e-03,
        -2.0208e-03, -1.8465e-03,  7.4167e-04, -1.7367e-04, -1.0553e-03,
         1.1675e-03,  1.6575e-03,  1.6220e-03,  1.2486e-03,  5.3785e-04,
        -2.3730e-03, -1.3720e-03, -2.3906e-03,  1.4084e-03,  2.0704e-03,
         2.1616e-03,  1.4816e-03, -1.0844e-03,  1.1055e-03, -2.1750e-03,
         1.5892e-03, -1.6357e-03,  1.6568e-03,  1.2921e-03,  5.6292e-04,
        -8.1904e-04, -1.2027e-03, -1.7202e-03,  1.2157e-03, -8.1020e-04,
        -2.9450e-03, -3.3742e-06, -1.1993e-03,  1.0817e-03, -2.2299e-03,
         6.4766e-04, -1.7214e-03, -1.2841e-03, -1.9540e-03, -3.9240e-03,
         2.2508e-05,  1.0761e-03, -9.8650e-04, -4.2027e-04])

encoder_5 = encoder_5.view(8,-1)

encoder_6 = torch.tensor([[ 0.0013,  0.0038,  0.0037,  0.0041, -0.0015,  0.0014,  0.0005,  0.0025],
        [ 0.0005,  0.0044,  0.0044,  0.0040, -0.0020,  0.0010,  0.0004, -0.0009],
        [-0.0027,  0.0028,  0.0035,  0.0033, -0.0010, -0.0044, -0.0032, -0.0046],
        [-0.0016,  0.0026,  0.0037,  0.0040,  0.0038,  0.0018, -0.0003, -0.0028],
        [ 0.0005,  0.0026,  0.0047,  0.0038,  0.0031, -0.0009,  0.0010, -0.0037],
        [ 0.0044, -0.0003,  0.0032,  0.0023, -0.0024, -0.0044, -0.0048, -0.0052],
        [ 0.0037,  0.0013, -0.0016, -0.0049, -0.0041, -0.0022, -0.0051, -0.0020],
        [ 0.0007,  0.0018, -0.0047, -0.0031, -0.0018,  0.0028, -0.0046, -0.0019]])

target = torch.tensor([[0, 2, 2, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 0, 1, 1],
        [0, 0, 0, 0, 0, 0, 3, 2],
        [2, 4, 1, 0, 0, 3, 4, 1],
        [9, 5, 1, 0, 1, 1, 1, 0],
        [3, 4, 1, 0, 0, 2, 3, 1],
        [0, 3, 3, 0, 3, 3, 1, 0]])

total_num = torch.sum(target)
target = target/total_num

features = [encoder_5, encoder_6, target]
for i, image in enumerate(features):
    image = image.numpy()
    image = (image - image.min()) / (image.max() - image.min())
    if i==2:
        print(image)
    # Save the image
    '''
    plt.imshow(image, cmap='viridis')
    plt.colorbar()
    plt.axis('off')
    plt.savefig(f"./test_feature_{i}.png")
    plt.close()
    '''